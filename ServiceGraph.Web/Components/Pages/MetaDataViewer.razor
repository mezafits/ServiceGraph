 @using System.Collections.Generic
<style>
    .metadata-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 1rem;
    }

    .metadata-card {
    margin-top: 10px;
    background: #f5f5f5;
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
    }

    .metadata-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
    font-weight: bold;
    }

    .metadata-tag {
    font-size: 1.1rem;
    }

    .metadata-type {
    background-color: #d0e7ff;
    color: #0078d4;
    border-radius: 4px;
    padding: 0.2rem 0.5rem;
    font-size: 0.8rem;
    }

    .metadata-content {
    font-size: 0.95rem;
    color: #333;
    }

    .metadata-link {
    color: #0066cc;
    text-decoration: none;
    word-break: break-all;
    }

    .metadata-code {
    background-color: #eaeaea;
    padding: 0.5rem;
    border-radius: 4px;
    font-family: Consolas, monospace;
    overflow-x: auto;
    }

    .tab-content {
    padding: 1rem 0;
    }
</style>

<div class="metadata-container">
    <FluentTabs @bind-ActiveTabId="@activeTabId">
        @foreach (var group in MetaDataByType)
        {
            <FluentTab Id="@group.Key" Label="@group.Key">
                <div class="tab-content">
                    @foreach (var item in group)
                    {
                        <div>
                            <div>
                                <span>@item.TagName</span>
                            </div>
                            <div>
                                @switch (item.TagType)
                                {
                                    case "Link":
                                        <a href="@item.TagValue" target="_blank" class="metadata-link">
                                            🔗 @item.TagValue
                                        </a>
                                        break;
                                    case "Text":
                                        <p>@item.TagValue</p>
                                        break;
                                    case "Code":
                                        <pre class="metadata-code"><code>@item.TagValue</code></pre>
                                        break;
                                    default:
                                        <p>@item.TagValue</p>
                                        break;
                                }
                            </div>
                        </div>
                    }
                </div>
            </FluentTab>
        }
    </FluentTabs>
</div>

@code {
    private List<Metadata> metadataItems;
    private List<Metadata> exampleItems;
    private IEnumerable<IGrouping<string, Metadata>> MetaDataByType = new List<IGrouping<string, Metadata>>();
    private string activeTabId = string.Empty;
    protected override Task OnInitializedAsync()
    {


        exampleItems = new List<Metadata>
            {
                new Metadata
                {
                    TagName = "Website",
                    TagType = "Link",
                    TagValue = "https://example.com"
                },
                new Metadata
                {
                    TagName = "Description",
                    TagType = "Text",
                    TagValue = "This is a sample description for illustrative purposes."
                },
                new Metadata
                {
                    TagName = "Config",
                    TagType = "Code",
                    TagValue = "{ \"enabled\": true, \"level\": \"debug\" }"
                }
            };
        MetaDataByType = exampleItems.GroupBy(x => x.TagType);




        return base.OnInitializedAsync();
    }
    public async Task ViewMetaData(List<Metadata> items)
    {
        if (items != null && items.Count > 0)
        {
            metadataItems = items;
            MetaDataByType = items.GroupBy(x => x.TagType);
        }
        else
        {
            MetaDataByType = exampleItems.GroupBy(x => x.TagType);
        }

        // Set the active tab to the first tab if available
        var firstGroup = MetaDataByType.FirstOrDefault();
        if (firstGroup != null)
        {
            activeTabId = firstGroup.Key;
        }

        StateHasChanged();
    }
}