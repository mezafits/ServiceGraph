 @using System.Collections.Generic
 @inject IJSRuntime JSRuntime
 @inject ISyncService syncService

<style>
    .metadata-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 1rem;
    }

    .metadata-card {
    margin-top: 10px;
    background: #f5f5f5;
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
    }

    .metadata-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
    font-weight: bold;
    }

    .metadata-tag {
    font-size: 1.1rem;
    }

    .metadata-type {
    background-color: #d0e7ff;
    color: #0078d4;
    border-radius: 4px;
    padding: 0.2rem 0.5rem;
    font-size: 0.8rem;
    }

    .metadata-content {
    font-size: 0.95rem;
    color: #333;
    }

    .metadata-link {
    color: #0066cc;
    text-decoration: none;
    word-break: break-all;
    }

    .metadata-code {
    background-color: #eaeaea;
    padding: 0.5rem;
    border-radius: 4px;
    font-family: Consolas, monospace;
    overflow-x: auto;
    }

    .tab-content {
    padding: 1rem 0;
    }
</style>

<div class="metadata-container">
    <div class="project-selector-container">
        <div class="project-selector hex">
            <div class="project-actions">
                <FluentButton Appearance="Appearance.Outline" Size="Size.Small" OnClick="async ()=>{ await ShowCreateMetadata(true);}" Title="Add Metadata" IconStart="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Filled.Size20.Add())" />
                <FluentButton Appearance="Appearance.Outline" Size="Size.Small" OnClick="async ()=>{ await ShowCreateMetadata(false);}" Title="Edit Metadata" IconStart="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Filled.Size20.Edit())" />
            </div>
        </div>
    </div>
    <FluentTabs @bind-ActiveTabId="@activeTabId">
        @foreach (var group in MetaDataByType)
        {
            <FluentTab Id="@group.Key" Label="@group.Key">
                <div class="tab-content">
                    @foreach (var item in group)
                    {
                        <div class="metadata-item @(item == selectedMetadata ? "selected" : "")" @onclick="() => SelectMetadata(item)">
                            <div>
                                @switch (item.TagType)
                                {
                                    case "Link":
                                        <div>
                                            <span>@item.TagName</span>
                                        </div>
                                        <a href="@item.TagValue" target="_blank" class="metadata-link">
                                            🔗 @item.TagValue
                                        </a>
                                        break;
                                    case "Text":
                                        <BlazoredTextEditor>
                                            <ToolbarContent><div><span>@item.TagName</span></div></ToolbarContent>
                                            <EditorContent>
                                                <div class="metadata-content">@item.TagValue</div>
                                            </EditorContent>
                                        </BlazoredTextEditor>
                                        break;
                                    case "Code":
                                        <div>
                                            <span>@item.TagName</span>
                                        </div>
                                        <pre class="metadata-code"><code>@item.TagValue</code></pre>
                                        break;
                                    case "Property":
                                        <div>
                                            <span>@item.TagName</span>
                                            <span>@item.TagValue</span>
                                        </div>
                                        break;
                                    default:
                                        <p>@item.TagValue</p>
                                        break;
                                }
                            </div>
                        </div>
                    }
                </div>
            </FluentTab>
        }
    </FluentTabs>
</div>


<div class="modal fade" id="AddMetaDataModal" tabindex="-1" role="dialog" aria-labelledby="myModalTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="myModalTitle">Edit Edge</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@selectedMetadata">
                    <div class="metadata-container">
                        <div class="metadata-card">
                            <div class="form-group">
                                <label>Tag Type</label>
                                <InputSelect class="form-control mb-2" @bind-Value="selectedMetadata.TagType">
                                    <option value="Link">Link</option>
                                    <option value="Text">Text</option>
                                    <option value="Query">Query</option>
                                    <option value="Property">Property</option>
                                </InputSelect>
                            </div>
                            @if (selectedMetadata.TagType == "Property")
                            {
                                <div class="form-group">
                                <label>Tag Name</label>
                                <InputSelect class="form-control mb-2" @bind-Value="selectedMetadata.TagName">
                                    <option value="Geneva Account">Geneva Account</option>
                                    <option value="Geneva Namespace">Geneva Namespace</option>
                                    <option value="TSG">TSG</option>
                                </InputSelect>
                                </div>
                            }
                            else
                            {
                                <div class="form-group">
                                    <label>Tag Name</label>
                                    <InputText class="form-control mb-2" @bind-Value="selectedMetadata.TagName" />
                                </div>
                            }
                            <div class="form-group">
                                <label>Tag Value</label>
                                <InputText class="form-control mb-2" @bind-Value="selectedMetadata.TagValue" />
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="CreateMetadata" data-dismiss="modal">Save Changes</button>
                <button type="button" class="btn btn-secondary" @onclick="@(() =>{})" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="EdgeMetaDataModal" tabindex="-1" role="dialog" aria-labelledby="myModalTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="myModalTitle">Edit Edge</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@selectedMetadata">
                    <div class="metadata-container">
                        <div class="metadata-card">
                            <div class="form-group">
                                <label>Tag Type</label>
                                <InputSelect class="form-control mb-2" @bind-Value="selectedMetadata.TagType">
                                    <option value="Link">Link</option>
                                    <option value="Text">Text</option>
                                    <option value="Query">Query</option>
                                    <option value="Property">Property</option>
                                </InputSelect>
                            </div>

                            @if (selectedMetadata.TagType == "Property")
                            {
                                <div class="form-group">
                                    <label>Tag Name</label>
                                    <InputSelect class="form-control mb-2" @bind-Value="selectedMetadata.TagName">
                                        <option value="Geneva Account">Geneva Account</option>
                                        <option value="Geneva Namespace">Geneva Namespace</option>
                                        <option value="TSG">TSG</option>
                                    </InputSelect>
                                </div>
                            }
                            else
                            {
                                <div class="form-group">
                                    <label>Tag Name</label>
                                    <InputText class="form-control mb-2" @bind-Value="selectedMetadata.TagName" />
                                </div>
                            }

                            <div class="form-group">
                                <label>Tag Value</label>
                                <InputText class="form-control mb-2" @bind-Value="selectedMetadata.TagValue" />
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="UpdateMetadata" data-dismiss="modal">Save Changes</button>
                <button type="button" class="btn btn-secondary" @onclick="@(() =>{})" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>


@code {


    private string BSOType = string.Empty;
    private List<Metadata> metadataItems;
    private List<Metadata> exampleItems;
    private BaseObject baseObject;
    private Metadata selectedMetadata = new Metadata();
    private IEnumerable<IGrouping<string, Metadata>> MetaDataByType = new List<IGrouping<string, Metadata>>();
    private string activeTabId = string.Empty;
    protected override Task OnInitializedAsync()
    {


        exampleItems = new List<Metadata>
            {
                new Metadata
                {
                    TagName = "Website",
                    TagType = "Link",
                    TagValue = "https://example.com"
                },
                new Metadata
                {
                    TagName = "Description",
                    TagType = "Text",
                    TagValue = "This is a sample description for illustrative purposes."
                },
                new Metadata
                {
                    TagName = "Config",
                    TagType = "Code",
                    TagValue = "{ \"enabled\": true, \"level\": \"debug\" }"
                }
            };
        MetaDataByType = exampleItems.GroupBy(x => x.TagType);




        return base.OnInitializedAsync();
    }

    private void SelectMetadata(Metadata item)
    {
        selectedMetadata = item;
    }

    private void CreateMetadata()
    {
        selectedMetadata.Id = Guid.NewGuid();
        if (BSOType == "ServiceNode")
        {
            var serviceNode = baseObject as ServiceNode;
            if (serviceNode != null)
            {
                serviceNode.Metadata.Add(selectedMetadata);
                baseObject = serviceNode;
            }
            syncService.UpsertServiceNodeAsync(serviceNode);
        }
        else if (BSOType == "Edge")
        {
            var edge = baseObject as Edge;
            if (edge != null)
            {
                edge.Metadata.Add(selectedMetadata);
                baseObject = edge;
            }
            syncService.UpsertEdgeAsync(edge);
        }
        else if (BSOType == "Project")
        {
            var project = baseObject as Project;
            if (project != null)
            {
                project.Metadata.Add(selectedMetadata);
                baseObject = project;
            }
            syncService.UpsertProjectAsync(project);
        }
    }
    
    private void UpdateMetadata()
    {
        
        if (BSOType == "ServiceNode")
        {
            var serviceNode = baseObject as ServiceNode;
            if (serviceNode != null)
            {
                var index = serviceNode.Metadata.FindIndex(m => m.Id == selectedMetadata.Id);
                serviceNode.Metadata[index] = selectedMetadata;
                syncService.UpsertServiceNodeAsync(serviceNode);
            }
            
        }
        else if (BSOType == "Edge")
        {
            var edge = baseObject as Edge;
            if (edge != null)
            {
                var index = edge.Metadata.FindIndex(m => m.Id == selectedMetadata.Id);
                edge.Metadata[index] = selectedMetadata;
                syncService.UpsertEdgeAsync(edge);
            }
            
        }
        else if (BSOType == "Project")
        {
            var project = baseObject as Project;
            if (project != null)
            {
                var index = project.Metadata.FindIndex(m => m.Id == selectedMetadata.Id);
                project.Metadata[index] = selectedMetadata;
                syncService.UpsertProjectAsync(project);
            }

        }
    }

    private async Task ShowCreateMetadata(bool createNew)
    {
        if(createNew)
        {
            await JSRuntime.InvokeVoidAsync("showModal", "AddMetaDataModal");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("showModal", "EdgeMetaDataModal");
        }
    }

    public async Task ViewServiceNode(ServiceNode node)
    {
        BSOType = "ServiceNode";
        await ViewMetaData(node);
    }
    public async Task ViewEdge(Edge edge)
    {
        BSOType = "Edge";
        await ViewMetaData(edge);
    }
    public async Task ViewProject(Project project)
    {
        BSOType = "Project";    
        await ViewMetaData(project);
    }

     
    private async Task ViewMetaData(BaseObject bso)
    {
        baseObject = bso;
        var items = bso.Metadata;
        if (items != null && items.Count > 0)
        {
            metadataItems = items;
            MetaDataByType = items.GroupBy(x => x.TagType);
        }
        else
        {
            MetaDataByType = exampleItems.GroupBy(x => x.TagType);
        }

        // Set the active tab to the first tab if available
        var firstGroup = MetaDataByType.FirstOrDefault();
        if (firstGroup != null)
        {
            activeTabId = firstGroup.Key;
        }

        StateHasChanged();
    }
}