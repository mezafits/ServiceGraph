@using ServiceGraph.Web.Services
@inject ISyncService syncService;
@inject ILogger<GraphView> Logger;
@inject NavigationManager Navigation
@inject SvgFileCache svgFileCahce;
@* @inject IconsUtility iconsUtility; *@
@* @inject IKustoQueryService kustoQueryService; *@


<style>
    .leftToolBar {
    display: flex;
    width: 250px;
    }

    .meta-data {
    border-left: 1px solid blue; /* 1px blue border on the left */
    border-right: 1px solid blue; /* 1px  blue border on the right */
    }

</style>

<div class="container-fluid">
    <div id="usercontrols-row" class="row align-items-center mb-2 usercontrols">
        <div class="col d-flex gap-1">
            <ProjectMenu Complete="ProjectActionComplete"></ProjectMenu>
        </div>
        <div class="col d-flex gap-1">
            <GridControlMenu Complete="HandleGridControlComplete"></GridControlMenu>
        </div>
        <div class="col-auto">
            <LoginDisplay />
        </div>
    </div>
    <div class="row">
        <FluentSplitter Orientation="@Orientation.Horizontal"   BarSize="6" Panel1MinSize="25%" Panel2Size="30%" Panel2MinSize="30%">
            <Panel1>
                <div id="cy" style="width: 100%; height: 90vh;"></div>
            </Panel1>
            <Panel2>
                <DataViewer @ref="metaDataViewer"></DataViewer>
            </Panel2>
        </FluentSplitter>
    </div>

    <EditNode @ref=editModal Complete="Refresh"></EditNode>
    <EditEdge @ref=editEdgeModal Complete="Refresh"></EditEdge>
    <IconPicker @ref=iconPicker IconSelectedEvent="Refresh"></IconPicker>
</div>

<script src="js/servicegraph-cytoscape.js"></script>



@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ProjectId { get; set; }

    EditNode editModal = new EditNode();
    EditEdge editEdgeModal = new EditEdge();
    DataViewer metaDataViewer = new DataViewer();
    IconPicker iconPicker = new IconPicker();

    [Inject]
    IJSRuntime JS { get; set; }

    private List<Project> projects = new List<Project>();
    private Project selectedProject;

    private DotNetObjectReference<GraphView>? objRef;

    public List<SvgFileInfo> svgFiles { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // var results = await kustoQueryService.RunSampleQueryAsync();
        // foreach (var v in results)
        // {
        //     Logger.LogInformation(v);
        // }

        await base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Task.Run(async () =>
       {
           if (firstRender)
           {
               svgFiles = svgFileCahce.Search("*");
               objRef = DotNetObjectReference.Create(this);
               await JS.InvokeAsync<string>("SetIconCollection", svgFiles);
               await JS.InvokeAsync<string>("SetDotNetObjectRef", objRef);
           }

           Refresh();
           return;
       });

        base.OnAfterRender(firstRender);
    }


    [JSInvokable]
    public async Task<string> RemoveServiceNodeFromGroup(ServiceNode id)
    {
        try
        {
            Logger.LogInformation($"Removing node {id} from group.");

            await syncService.RemoveServiceNodeFromGroupAsync(id);

            Logger.LogInformation($"Remove successful for node {id}.");

            Refresh();
            return $"Remove successful for node {id}.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error removing node {id}: {ex.Message}");
            return Newtonsoft.Json.JsonConvert.SerializeObject(new { error = ex.Message });
        }
    }

    [JSInvokable]
    public async Task<string> RemoveServiceNode(ServiceNode id)
    {
        try
        {
            Logger.LogInformation($"Removing node {id}.");

            await syncService.RemoveServiceNodeAsync(id);

            Logger.LogInformation($"Remove successful for node {id}.");

            Refresh();
            return $"Remove successful for node {id}.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error removing node {id}: {ex.Message}");
            return Newtonsoft.Json.JsonConvert.SerializeObject(new { error = ex.Message });
        }
    }

    [JSInvokable]
    public async Task<string> RemoveEdge(Edge id)
    {
        try
        {
            Logger.LogInformation($"Removing node {id}.");

            await syncService.RemoveEdgeAsync(id);

            Logger.LogInformation($"Remove successful for node {id}.");

            Refresh();
            return $"Remove successful for node {id}.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error removing node {id}: {ex.Message}");
            return Newtonsoft.Json.JsonConvert.SerializeObject(new { error = ex.Message });
        }
    }

    [JSInvokable]
    public async Task ViewMetaData(string elementId, string elementType)
    {
        if (elementType == "edge")
        {
            var ele = selectedProject.edges.Where(x => x.Id == Guid.Parse(elementId)).SingleOrDefault();
            await metaDataViewer.ViewEdge(ele);
        }

        if (elementType == "node")
        {
            var ele = selectedProject.nodes.Where(x => x.Id == Guid.Parse(elementId)).SingleOrDefault();
            await metaDataViewer.ViewServiceNode(ele);
        }

        if (elementType == "project")
        {
            var ele = selectedProject;
            await metaDataViewer.ViewProject(ele);
        }

    }

    [JSInvokable]
    public async Task<string> AddGroupNode(List<string> elementIds, float x = 0.0f, float y = 0.0f)
    {
        try
        {

            //identify node types. 
            List<ServiceNode> nodes = new List<ServiceNode>();
            bool groupNodeFound = false;
            ServiceNode groupNode = new ServiceNode();

            foreach(var element in elementIds)
            {
                var n = await syncService.GetServiceNodeByIdAsync(selectedProject.Id, Guid.Parse(element));
                if(n.NodeType == "group")
                {
                    groupNodeFound = true;
                    groupNode = n;
                }
                nodes.Add(n);
            }

            if (!groupNodeFound)
            {
                groupNode.Name = $"Group {selectedProject.nodes.Count + 1}";
                groupNode.Id = Guid.NewGuid();
                groupNode.ParentId = Guid.Empty;
                groupNode.NodeType = "group";
                groupNode.ProjectId = selectedProject.Id;
                groupNode.IconId = null;
                groupNode.Xpos = x;
                groupNode.Ypos = y;
                await syncService.UpsertServiceNodeAsync(groupNode);
            }

            foreach (var node in elementIds)
            {
                if (node != groupNode.Id.ToString())
                {
                    await syncService.AddServiceNodeToGroupAsync(selectedProject.Id, groupNode.Id, Guid.Parse(node));
                }
            }



            await syncService.SyncAsync(selectedProject);

            Logger.LogInformation($"add successful for node {groupNode.Id}.");
            Refresh();
            return $"add successful for node {groupNode.Id}.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error adding node: {ex.Message}");
            return Newtonsoft.Json.JsonConvert.SerializeObject(new { error = ex.Message });
        }
    }

    [JSInvokable]
    public async Task<string> AddServiceNode(float x, float y)
    {
        try
        {


            var serviceNode = new ServiceNode();
            serviceNode.Name = $"New Node {selectedProject.nodes.Count + 1}";

            serviceNode.Id = Guid.NewGuid();
            serviceNode.IconId = "10040";
            serviceNode.Xpos = x;
            serviceNode.Ypos = y;
            serviceNode.ProjectId = selectedProject.Id;
            serviceNode.ParentId = serviceNode.Id;
            await syncService.UpsertServiceNodeAsync(serviceNode);
            var results = await syncService.GetServiceNodeAsync(serviceNode);
            var serializedResults = Newtonsoft.Json.JsonConvert.SerializeObject(results);

            await syncService.SyncAsync(selectedProject);

            Logger.LogInformation($"add successful for node {serviceNode.Id}.");
            Refresh();
            return serializedResults;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error adding node: {ex.Message}");
            return Newtonsoft.Json.JsonConvert.SerializeObject(new { error = ex.Message });
        }
    }

    [JSInvokable]
    public async Task<string> UpdateServiceNodePosition(ServiceNode node, float x, float y)
    {
        try
        {
            Logger.LogInformation($"Updating position for node {node.Id} to ({x}, {y}).");

            var serviceNode = await syncService.GetServiceNodeAsync(node);
            serviceNode.Xpos = x;
            serviceNode.Ypos = y;

            await syncService.UpsertServiceNodeAsync(serviceNode);
            await syncService.SyncAsync(selectedProject);

            Logger.LogInformation($"Update successful for node {node.Id}.");

            return "Success";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error updating position for node {node.Id}: {ex.Message}");
            return Newtonsoft.Json.JsonConvert.SerializeObject(new { error = ex.Message });
        }
    }

    [JSInvokable]
    public async Task<string> GetEdgeById(Edge edge)
    {
        var results = await syncService.GetEdgeAsync(edge);
        editEdgeModal.SetEdge(results);
        var tp = Newtonsoft.Json.JsonConvert.SerializeObject(results);
        return tp;
    }

    [JSInvokable]
    public async Task<string> GetServiceNodeById(ServiceNode serviceNode)
    {
        var results = await syncService.GetServiceNodeAsync(serviceNode);
        var tp = Newtonsoft.Json.JsonConvert.SerializeObject(results);
        editModal.SetServiceNode(results);
        iconPicker.SetServiceNode(results);
        return tp;
    }

    [JSInvokable]
    public async Task AddEdge(string sourceId, string targetId)
    {
        try
        {
            // Create a new edge model
            var newEdge = new Edge { ProjectId = selectedProject.Id, Id = Guid.NewGuid(), Source = sourceId, Destination = targetId };
            newEdge.Name = $"New Edge {selectedProject.edges.Count + 1}";
            await syncService.UpsertEdgeAsync(newEdge);
            Refresh();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding edge");
            // Handle errors
        }
    }


    public void HandleGridControlComplete(string action)
    {
        Task.Run(async ()=>{ 
            await JS.InvokeAsync<string>("ChangeOption","Grid","Toggle");
        });
    }

    public void ProjectActionComplete()
    { Task.Run(async () =>
        {
            selectedProject = await syncService.GetSelectedProjectAsync();
            var corrected_uri = Navigation.GetUriWithQueryParameter("ProjectId", selectedProject.Id.ToString());
            if (corrected_uri != Navigation.Uri)
            {
                Navigation.NavigateTo(corrected_uri);
            }
        });
    }
    public void Refresh()
    {
        Task.Run(async () =>
        {
            if (Guid.TryParse(ProjectId, out Guid result))
            {
                await syncService.SetSelectedProjectAsync(result.ToString());
            }
            projects = await syncService.GetProjectsAsync();
            if (projects != null)
            {
                selectedProject = await syncService.GetSelectedProjectAsync();
                 
                if (selectedProject != null)
                {
                    var p = selectedProject;
                    await JS.InvokeAsync<string>("refresh",p);
                }
            }
        });

        Console.WriteLine("Refreshing Service State");
    }

}
